## So which Approach?

*リモートかローカルか*

リモートなら：

動作の遅い端末を持っている人でも満足できる処理スピードを提供できる

ローカルなら：

APIサーバへの余計な通信をしなくていいので処理が早い
サーバの世話をしなくていい


しばらくはローカルを実装する。

コースの後の方でリモートを実装する。

ここで問題：

**webpackはブラウザ上で動作する代物ではない!*

## Webpack replacement

*Babelはブラウザで動くけど、webpackはそうはいかない*

両方をブラウザで実行してくれる、`ESBuild`を使うことにする

## A demo app

しばらくは、

ユーザがフォームにコードを入力して、画面上のsubmitボタンを押したら、

ESBuildがトランスパイルとバンドリングをして

その結果出来上がるこーどを画面に表示するアプリケーションを作る。

```bash
$ npx create-react-app jbook --template typescript
```


# Note: Caching for big performance gains

## Crazy number of requests

多分、reactとかを`import react from 'react'`すると
node_modules並みの依存関係をダウンロードすることになる。

作成中のアプリケーションでいえば、必要な分だけfetch()リクエストを送信することになる。

このセクションでは余計なリクエストを送信しないようにキャッシング機能を設けてパフォーマンスを向上するようにアプリケーションを改善していく。

#### Implementing Caching layer

要は`onLoad()`でキャッシング機能を設ける

`nested-test-pkg`はロード済か？

ロード済である: onLoadは速やかにreturnする

ロード済でない：fetch()する

キャッシュしたデータはどこに保存しておけばいいのだろうか。

ブラウザのlocalStroageにはそんなに空きがない。

`indexedDB`なるものを使う。

#### IndexedDB API

https://developer.mozilla.org/ja/docs/Web/API/IndexedDB_API

> IndexedDB は、ファイルや blob を含む大量の構造化データをクライアント側で保存するための低レベル API です。この API はインデックスを使用して、高パフォーマンスなデータの検索を行うことができます。ウェブストレージは比較的少量のデータを保存するのに有用ではありますが、構造化された非常に多くのデータを扱うには不十分です。IndexedDB が解決策を提供します。

ということでブラウザにすでに組み込まれているストレージの一種であるようだ。

#### Caching with key-value paires

```bash
$ cd jbook
$ npm install localforage
```

```TypeScript
import localforage from 'localforage';

const fileCache = localforage.createInstance({
   name: 'filecache' 
});


```

